@use "./variables" as var;
@use "./mixin" as mix;


//////////////////////////////////////
// WIP badge
//////////////////////////////////////
.wip-badge {
  position: fixed;
  bottom: 5em;
  width: 100%;
  @include mix.center-vertically-horizontally;
  
  p {
    display: inline-block;
    padding: .5em 1.5em;
    
    text-align: center;
    color: var.$color--blue-night--600;
    
    background-color: rgba(var.$color--blue-night--50, .05);
    border-radius: .5em;
    border-style: solid;
    border-color: rgba(var.$color--blue-night--50, .1);
    border-width: 1px;
    backdrop-filter: blur(10px);
  }
}//


//////////////////////////////////////
// loading spinner
//////////////////////////////////////
.loading::before {
  animation: 1.5s linear infinite spinner;
  animation-play-state: inherit;
  border: solid 5px #cfd0d1;
  border-bottom-color: #1c87c9;
  border-radius: 50%;
  content: "";
  height: 40px;
  position: absolute;
  top: 10%;
  right: 5%;
  transform: translate3d(-50%, -50%, 0);
  width: 40px;
  will-change: transform;
}

@keyframes spinner {
  0% {
    transform: translate3d(-50%, -50%, 0) rotate(0deg);
  }
  100% {
    transform: translate3d(-50%, -50%, 0) rotate(360deg);
  }
}

// @media screen and (max-width: v.$breakpoint--default) {
//   .loading::before {
//     top: 90%;
//     right: 5%;
//   }
// }

.hidden {
  display: none;
}

.invisible {
  visibility: hidden;
}


.divider {
  --border-width: 1px;
  
  width: 100%;
  height: calc(var(--border-width) + 2);
  border-bottom-style: solid;
  border-bottom-color: var.$color--blue-night--800;
  border-bottom-width: var(--border-width);
}

//

.stick-to-bottom {
  position: fixed;
  bottom: 0;
}

.square {
  z-index: 10;
  top: 0;
  position: sticky;
  width: 200px;
  height: 200px;
  border-color: #00BC4B;
}


////////////////////////////////////
// glitch
////////////////////////////////////
.glitch {
  color: #FAFAFA;
  font-size: 1.1rem;
  display: flex;
  flex-direction: column;
  
  &__stack {
    color: var.$color--green;
    display: grid;
    grid-template-columns: 1fr;
  }
  
  &__span {
    --stack-height: calc(100% / var(--stacks) - 1px);
    --inverse-index: calc(calc(var(--stacks) - 1) - var(--index));
    --clip-top: calc(var(--stack-height) * var(--index));
    --clip-bottom: calc(var(--stack-height) * var(--inverse-index));
    
    grid-row-start: 1;
    grid-column-start: 1;
    font-size: 1.1rem;
    clip-path: inset(var(--clip-top) 0 var(--clip-bottom) 0);
    animation: stack 200ms cubic-bezier(.46, .29, 0, 1.24) 1 backwards calc(var(--index) * 120ms), glitch 1.5s ease infinite 1.5s alternate-reverse;
  }
  
  &__span:nth-child(odd) {
    --glitch-translate: 8px;
  }
  
  &__span:nth-child(even) {
    --glitch-translate: -8px;
  }
  
  $color--scan-line-1: red;
  $color--scan-line-2: blue;
  
  @keyframes stack {
    0% {
      opacity: 0;
      transform: translateX(-50%);
      text-shadow: -2px 3px 0 $color--scan-line-1, 2px -3px 0 $color--scan-line-2;
    }
    60% {
      opacity: 0.5;
      transform: translateX(50%);
    }
    80% {
      transform: none;
      opacity: 1;
      text-shadow: 2px -3px 0 $color--scan-line-1, -2px 3px 0 $color--scan-line-2;
    }
    100% {
      text-shadow: none;
    }
  }
  
  @keyframes glitch {
    0% {
      text-shadow: -2px 3px 0 $color--scan-line-1, 2px -3px 0 $color--scan-line-2;
      transform: translate(var(--glitch-translate));
    }
    2% {
      text-shadow: 2px -3px 0 $color--scan-line-1, -2px 3px 0 $color--scan-line-2;
    }
    4%, 100% {
      text-shadow: none;
      transform: none;
    }
  }
  
}//










////////////////////////////////////
// scan lines effect
////////////////////////////////////

.scanlines {
  /* LIST OF FURTHER IMPROVEMENTS */
  
  // 1. settings: direction of moving scanlines (currently: only bottom to top)
  // 2. settings: number of moving scanlines (currently: 0 or 1)
  // 3. settings: delay between 2 moving scanlines
  // 4. check css validity with keyframes 0% without second step
  
  /*
  currently working on :
  calculation draft for keyframes steps
  
  $scan-moving-duration: 3s;
  $scan-moving-delay: 7s;
  
  total time = 10s (duration + delay)
  keyframes :
      0%: wait
      15%: start moving
      85%: end moving & start waiting
      100% : wait
  
  (the rest later)
  
  */
  
  position: relative;
  overflow: hidden; // only to animate the unique scanline
  
  
  
  /* REGULAR SCANLINES SETTINGS */
  
  // width of 1 scanline (min.: 1px)
  $scan-width: 2px;
  
  // emulates a damage-your-eyes bad pre-2000 CRT screen ♥ (true, false)
  $scan-crt: true;
  
  // frames-per-second (should be > 1), only applies if $scan-crt: true;
  $scan-fps: 60;
  
  // scanline-color (rgba)
  $scan-color: rgba(var.$color--blue-night, .3);
  
  // set z-index on 8, like in ♥ 8-bits ♥, or…
  // set z-index on 2147483648 or more to enable scanlines on Chrome fullscreen (doesn't work in Firefox or IE);
  $scan-z-index: 2147483648;
  
  /* MOVING SCANLINE SETTINGS */
  
  // moving scanline (true, false)
  $scan-moving-line: true;
  
  // opacity of the moving scanline
  $scan-opacity: .75;
  
  /* MIXINS */
  
  // apply CRT animation: @include scan-crt($scan-crt);
  @mixin scan-crt($scan-crt) {
    @if $scan-crt == true {
      animation: scanlines 1s steps($scan-fps) infinite;
    }
    @else { animation: none; }
  }
  
  // apply CRT animation: @include scan-crt($scan-crt);
  @mixin scan-moving($scan-moving-line) {
    @if $scan-moving-line == true {
      animation: scanline 6s linear infinite;
    }
    @else { animation: none; }
  }
  
  /* CSS .scanlines CLASS */

  &:before,
  &:after {
    display: block;
    pointer-events: none;
    content: '';
    position: absolute;
  }
  
  // unique scanline travelling on the screen
  &:before {
    // position: absolute;
    // bottom: 100%;
    width: 100%;
    height: $scan-width * 1;
    z-index: $scan-z-index + 1;
    background: $scan-color;
    opacity: $scan-opacity;
    // animation: scanline 6s linear infinite;
    @include scan-moving($scan-moving-line);
  }
  
  // the scanlines, so!
  &:after {
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: $scan-z-index;
    background: linear-gradient(
                    to bottom,
                    transparent 50%,
                    $scan-color 51%
    );
    background-size: 100% $scan-width*2;
    @include scan-crt($scan-crt);
  }
  
  /* ANIMATE UNIQUE SCANLINE */
  @keyframes scanline {
    0% {
      transform: translate3d(0,200000%,0);
      // bottom: 0%; // to have a continuous scanline move, use this line (here in 0% step) instead of transform and write, in &:before, { position: absolute; bottom: 100%; }
    }
  }
  
  @keyframes scanlines {
    0% {
      background-position: 0 50%;
      // bottom: 0%; // to have a continuous scanline move, use this line (here in 0% step) instead of transform and write, in &:before, { position: absolute; bottom: 100%; }
    }
  }
}